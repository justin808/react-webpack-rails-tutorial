# Control Plane GitHub Action

name: Deploy-To-Control-Plane
description: 'Deploys both to staging and to review apps'

inputs:
  app_name:
    description: 'The name of the app to deploy'
    required: true
  org:
    description: 'The org of the app to deploy'
    required: true
  github_token:
    description: 'The GitHub token for authentication'
    required: true

outputs:
  rails_url:
    description: 'The URL of the deployed Rails application'
    value: ${{ steps.deploy.outputs.rails_url }}

runs:
  using: 'composite'
  steps:
    - name: Setup Environment
      uses: ./.github/actions/setup-environment

    - name: Get correct commit SHA
      id: get_sha
      shell: bash
      run: |
        if [[ "$GITHUB_EVENT_NAME" == "issue_comment" ]]; then
          PR_SHA=$(gh pr view ${{ env.PR_NUMBER }} --json headRefOid --jq '.headRefOid')
          echo "sha=$PR_SHA" >> $GITHUB_OUTPUT
          echo "sha_short=${PR_SHA:0:7}" >> $GITHUB_OUTPUT
        else
          echo "sha=$GITHUB_SHA" >> $GITHUB_OUTPUT
          echo "sha_short=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        PR_NUMBER: ${{ env.PR_NUMBER }}

    # Updated caching step to v3
    - uses: actions/cache@v3
      with:
        path: /tmp/.docker-cache
        key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile', '**/package.json', '**/yarn.lock') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile', '**/package.json', '**/yarn.lock') }}
          ${{ runner.os }}-docker-

    - name: cpflow setup-app
      shell: bash
      run: |
        if ! cpflow exists -a ${{ inputs.app_name }} ; then
          cpflow setup-app -a ${{ inputs.app_name }}
        fi

    # Provision all infrastructure on Control Plane.
    # app react-webpack-rails-tutorial will be created per definition in .controlplane/controlplane.yml
    - name: Build and deploy
      shell: bash
      run: |
        cpln image docker-login
        # Use BUILDKIT_PROGRESS=plain to get more verbose logging of the build
        # BUILDKIT_PROGRESS=plain cpflow build-image -a ${{ inputs.app_name }} --commit ${{steps.get_sha.outputs.sha_short}} --org ${{inputs.org}}
        cpflow build-image -a ${{ inputs.app_name }} --commit=${{steps.get_sha.outputs.sha_short}} --org=${{inputs.org}}

    - name: Deploy to Control Plane
      id: deploy
      shell: bash
      run: |
        # Debug git commit information
        echo "üîç Debugging git commit information:"
        echo "Current directory: $(pwd)"
        echo "Git status:"
        git status
        echo "Git log (last 5 commits):"
        git log -n 5 --oneline
        echo "steps.get_sha.outputs.sha_short: ${{steps.get_sha.outputs.sha_short}}"
        echo "Full SHA from git rev-parse HEAD: $(git rev-parse HEAD)"
        echo "Short SHA from git rev-parse --short HEAD: $(git rev-parse --short HEAD)"
        
        # Deploy rails workload
        echo "üöÄ Starting deployment process..."
        echo "üì¶ Building image with commit SHA: ${{steps.get_sha.outputs.sha_short}}"
        
        # Create a temporary file for the output
        TEMP_OUTPUT=$(mktemp)
        
        # Run the command and tee output to both stdout and temp file
        set -o pipefail  # Make sure we get the correct exit code from the cpln command
        
        echo "üîÑ Building and deploying with cpflow..."
        if cpflow build-image -a ${{ inputs.app_name }} --commit=${{steps.get_sha.outputs.sha_short}} --org=${{inputs.org}} | tee "$TEMP_OUTPUT" && \
           cpflow deploy-image -a ${{ inputs.app_name }} --run-release-phase --org ${{inputs.org}} --verbose | tee -a "$TEMP_OUTPUT"; then
          
          # Extract the URL from the deployment output
          RAILS_URL=$(grep -o 'https://rails-[^[:space:]]*\.cpln\.app' "$TEMP_OUTPUT" || true)
          if [ -n "$RAILS_URL" ]; then
            echo "üåê Found Rails deployment URL: $RAILS_URL"
            echo "rails_url=$RAILS_URL" >> $GITHUB_OUTPUT
            rm "$TEMP_OUTPUT"
          else
            rm "$TEMP_OUTPUT"
            echo "‚ùå Failed to extract Rails URL from deployment output"
            exit 1
          fi
        else
          rm "$TEMP_OUTPUT"
          echo "‚ùå Deployment command failed"
          exit 1
        fi
