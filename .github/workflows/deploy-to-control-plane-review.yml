name: Deploy Review App to Control Plane

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [master]
  issue_comment:
    types: [created]

concurrency:
  group: review-app-${{ github.event.pull_request.number || github.event.issue.number }}
  cancel-in-progress: true

env:
  CPLN_ORG: ${{secrets.CPLN_ORG_STAGING}}
  CPLN_TOKEN: ${{secrets.CPLN_TOKEN_STAGING}}
  PR_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}

jobs:
  check-concurrent:
    name: Deploy Review App to Control Plane / check-concurrent
    runs-on: ubuntu-latest
    outputs:
      cancelled: ${{ steps.check.outputs.cancelled }}
    steps:
      - name: Check for concurrent deployment
        id: check
        run: |
          if [ "${{ github.run_attempt }}" != "1" ]; then
            echo "‚ö†Ô∏è Cancelling previous deployment due to new code push..."
            echo "cancelled=true" >> $GITHUB_OUTPUT
          else
            echo "cancelled=false" >> $GITHUB_OUTPUT
          fi

  deploy-to-control-plane-review:
    needs: check-concurrent
    if: |
      needs.check-concurrent.outputs.cancelled != 'true' &&
      (github.event_name == 'workflow_dispatch' ||
       github.event_name == 'pull_request' ||
       (github.event_name == 'issue_comment' && 
        github.event.comment.body == '/deploy-review-app' && 
        github.event.issue.pull_request))
    runs-on: ubuntu-latest

    permissions:
      contents: read
      deployments: write
      pull-requests: write

    outputs:
      app_url: ${{ steps.deploy.outputs.app_url }}
      deployment_id: ${{ steps.create-deployment.outputs.result }}

    steps:
      - name: Create initial comment and get job URL
        id: create-comment
        uses: actions/github-script@v7
        with:
          script: |
            const currentJob = await github.rest.actions.getJobForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              job_id: context.runId
            }).then(response => response.data);
            
            const statusUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/job/${currentJob.id}?pr=${context.issue.number || context.payload.pull_request.number}`;
            core.exportVariable('statusUrl', statusUrl);
            
            const deploymentId = Date.now().toString();
            core.exportVariable('deploymentId', deploymentId);
            
            const message = "üöÄ Starting new deployment [" + deploymentId + "] for commit: " + context.sha.substring(0, 7) +
            "\nChanges: " + (context.payload.commits ? context.payload.commits[0].message : '') +
            "\nStatus: " + statusUrl;
            
            const comment = await github.rest.issues.createComment({
              issue_number: context.issue.number || context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
            
            core.setOutput('comment-id', comment.data.id);

      - name: Create GitHub Deployment
        id: create-deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'review-app',
              auto_merge: false,
              required_contexts: []
            });
            return deployment.data.id;

      - name: Get PR HEAD Ref
        if: ${{ github.event_name == 'issue_comment' }}
        id: getRef
        run: |
          echo "PR_REF=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json headRefName | jq -r '.headRefName')" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.getRef.outputs.PR_REF || github.ref }}

      - name: Update deployment status (in_progress)
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create-deployment.outputs.result }},
              state: 'in_progress',
              description: 'Deployment is in progress'
            });

      - name: Configure app name
        id: app-config
        run: |
          APP_NAME="qa-react-webpack-rails-tutorial-pr-${{ env.PR_NUMBER }}"
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Deploy to Control Plane
        id: deploy
        uses: ./.github/actions/deploy-to-control-plane
        with:
          app_name: ${{ env.APP_NAME }}
          org: ${{ env.CPLN_ORG }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Post deployment status
        if: success()
        uses: actions/github-script@v7
        env:
          RAILS_URL: ${{ steps.deploy.outputs.rails_url }}
          COMMENT_ID: ${{ steps.create-comment.outputs.comment-id }}
          DEPLOYMENT_ID: ${{ env.deploymentId }}
        with:
          script: |
            const message = "‚úÖ Deployment [" + process.env.DEPLOYMENT_ID + "] successful!\n\nüöÄ Rails app: " + process.env.RAILS_URL + "\nüìä Status: " + process.env.statusUrl;
            
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: process.env.COMMENT_ID,
              body: message
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create-deployment.outputs.result }},
              state: 'success',
              environment_url: process.env.RAILS_URL,
              description: '‚úÖ Deployment successful'
            });

      - name: Post deployment failure
        if: failure()
        uses: actions/github-script@v7
        env:
          COMMENT_ID: ${{ steps.create-comment.outputs.comment-id }}
          DEPLOYMENT_ID: ${{ env.deploymentId }}
        with:
          script: |
            const message = "‚ùå Deployment [" + process.env.DEPLOYMENT_ID + "] failed\n\nCommit: " + context.sha.substring(0, 7) + "\nWorkflow Status: " + process.env.statusUrl;
            
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: process.env.COMMENT_ID,
              body: message
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create-deployment.outputs.result }},
              state: 'failure',
              description: '‚ùå Deployment failed'
            });
