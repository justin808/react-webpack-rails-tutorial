// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Header from "./Header/Header.bs.mjs";
import * as Actions from "./Actions/Actions.bs.mjs";
import * as CommentForm from "./CommentForm/CommentForm.bs.mjs";
import * as CommentList from "./CommentList/CommentList.bs.mjs";
import * as JsxRuntime from "react/jsx-runtime";

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* SetComments */0 :
        return {
                comments: action._0,
                error: state.error,
                isSaving: state.isSaving
              };
    case /* SetError */1 :
        return {
                comments: state.comments,
                error: action._0,
                isSaving: state.isSaving
              };
    case /* SetIsSaving */2 :
        return {
                comments: state.comments,
                error: state.error,
                isSaving: action._0
              };
    
  }
}

function RescriptPage(props) {
  var match = React.useReducer(reducer, {
        comments: [],
        error: /* NoError */0,
        isSaving: /* Free */0
      });
  var dispatch = match[1];
  var state = match[0];
  var storeComment = function (author, text) {
    Curry._1(dispatch, {
          TAG: /* SetError */1,
          _0: /* NoError */0
        });
    Curry._1(dispatch, {
          TAG: /* SetIsSaving */2,
          _0: /* BusySaving */1
        });
    var saveAndFetchComments = async function (param) {
      try {
        await Actions.Create.storeComment({
              author: author,
              text: text
            });
        Curry._1(dispatch, {
              TAG: /* SetIsSaving */2,
              _0: /* Free */0
            });
        var comments = await Actions.Fetch.fetchComments(undefined);
        if (comments.TAG === /* Ok */0) {
          return Curry._1(dispatch, {
                      TAG: /* SetComments */0,
                      _0: comments._0
                    });
        } else {
          return Curry._1(dispatch, {
                      TAG: /* SetError */1,
                      _0: comments._0
                    });
        }
      }
      catch (exn){
        return Curry._1(dispatch, {
                    TAG: /* SetError */1,
                    _0: /* FailedToSaveComment */1
                  });
      }
    };
    saveAndFetchComments(undefined);
  };
  React.useEffect((function () {
          var fetchData = async function (param) {
            var comments = await Actions.Fetch.fetchComments(undefined);
            if (comments.TAG === /* Ok */0) {
              return Curry._1(dispatch, {
                          TAG: /* SetComments */0,
                          _0: comments._0
                        });
            } else {
              return Curry._1(dispatch, {
                          TAG: /* SetError */1,
                          _0: comments._0
                        });
            }
          };
          fetchData(undefined);
        }), []);
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                JsxRuntime.jsxs("h2", {
                      children: [
                        "Rescript + Rails Backend (with ",
                        JsxRuntime.jsx("a", {
                              children: "react_on_rails gem",
                              href: "https://github.com/shakacode/react_on_rails"
                            }),
                        ")"
                      ]
                    }),
                JsxRuntime.jsx(Header.make, {}),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h2", {
                              children: "Comments"
                            }),
                        JsxRuntime.jsxs("ul", {
                              children: [
                                JsxRuntime.jsx("li", {
                                      children: "Text supports Github Flavored Markdown."
                                    }),
                                JsxRuntime.jsx("li", {
                                      children: "Comments older than 24 hours are deleted."
                                    }),
                                JsxRuntime.jsx("li", {
                                      children: "Name is preserved. Text is reset, between submits"
                                    }),
                                JsxRuntime.jsx("li", {
                                      children: "To see Action Cable instantly update two browsers, open two browsers and submit a comment!"
                                    })
                              ]
                            }),
                        JsxRuntime.jsx(CommentForm.make, {
                              storeComment: storeComment,
                              isSaving: state.isSaving
                            }),
                        JsxRuntime.jsx(CommentList.make, {
                              comments: state.comments,
                              error: state.error
                            })
                      ],
                      className: "container"
                    })
              ]
            });
}

var make = RescriptPage;

var $$default = RescriptPage;

export {
  reducer ,
  make ,
  $$default ,
  $$default as default,
}
/* react Not a pure module */
