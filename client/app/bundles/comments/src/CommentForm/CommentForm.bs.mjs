// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as InlineForm from "./forms/InlineForm.bs.mjs";
import * as StackedFrom from "./forms/StackedFrom.bs.mjs";
import * as HorizontalForm from "./forms/HorizontalForm.bs.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import CommentFormModuleScss from "./CommentForm.module.scss";

var css = CommentFormModuleScss;

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* SetAuthor */0 :
        return {
                author: action._0,
                text: state.text,
                form: state.form
              };
    case /* SetText */1 :
        return {
                author: state.author,
                text: action._0,
                form: state.form
              };
    case /* SetFormType */2 :
        return {
                author: state.author,
                text: state.text,
                form: action._0
              };
    
  }
}

function CommentForm(props) {
  var isSaving = props.isSaving;
  var storeComment = props.storeComment;
  var match = React.useReducer(reducer, {
        author: "",
        text: "",
        form: /* HorizontalForm */0
      });
  var dispatch = match[1];
  var state = match[0];
  var handleAuthorChange = function ($$event) {
    var value = $$event.currentTarget.value;
    Curry._1(dispatch, {
          TAG: /* SetAuthor */0,
          _0: value
        });
  };
  var handleTextChange = function ($$event) {
    var value = $$event.currentTarget.value;
    Curry._1(dispatch, {
          TAG: /* SetText */1,
          _0: value
        });
  };
  var handleSubmit = function ($$event) {
    $$event.preventDefault();
    Curry._2(storeComment, state.author, state.text);
  };
  var forms = [
    {
      formName: "Horizontal Form",
      formType: /* HorizontalForm */0
    },
    {
      formName: "Inline Form",
      formType: /* InlineForm */1
    },
    {
      formName: "Stacked Form",
      formType: /* StackedFrom */2
    }
  ];
  var match$1 = state.form;
  var tmp;
  switch (match$1) {
    case /* HorizontalForm */0 :
        tmp = JsxRuntime.jsx(HorizontalForm.make, {
              author: state.author,
              handleAuthorChange: handleAuthorChange,
              text: state.text,
              handleTextChange: handleTextChange,
              handleSubmit: handleSubmit,
              isSaving: isSaving
            });
        break;
    case /* InlineForm */1 :
        tmp = JsxRuntime.jsx(InlineForm.make, {
              author: state.author,
              handleAuthorChange: handleAuthorChange,
              text: state.text,
              handleTextChange: handleTextChange,
              handleSubmit: handleSubmit,
              isSaving: isSaving
            });
        break;
    case /* StackedFrom */2 :
        tmp = JsxRuntime.jsx(StackedFrom.make, {
              author: state.author,
              handleAuthorChange: handleAuthorChange,
              text: state.text,
              handleTextChange: handleTextChange,
              handleSubmit: handleSubmit,
              isSaving: isSaving
            });
        break;
    
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("ul", {
                      children: Belt_Array.map(forms, (function (form) {
                              return JsxRuntime.jsx("li", {
                                          children: JsxRuntime.jsx("a", {
                                                children: form.formName,
                                                className: css.anchorButton
                                              }),
                                          className: "nav-item " + (
                                            state.form === form.formType ? "active" : ""
                                          ),
                                          role: "presentation",
                                          onClick: (function ($$event) {
                                              Curry._1(dispatch, {
                                                    TAG: /* SetFormType */2,
                                                    _0: form.formType
                                                  });
                                            })
                                        }, "form_" + form.formName);
                            })),
                      className: "nav nav-pills"
                    }),
                JsxRuntime.jsx("hr", {}),
                tmp
              ]
            });
}

var make = CommentForm;

export {
  css ,
  reducer ,
  make ,
}
/* css Not a pure module */
